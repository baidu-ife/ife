// Generated by CoffeeScript 1.7.0
(function() {
  var Adapter, Marc, W,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Adapter = require('../adapter_base');

  W = require('when');

  Marc = (function(_super) {
    __extends(Marc, _super);

    function Marc() {
      return Marc.__super__.constructor.apply(this, arguments);
    }

    Marc.prototype.name = 'marc';

    Marc.prototype.extensions = ['md'];

    Marc.prototype.output = 'html';

    Marc.prototype._render = function(str, options) {
      var base, k, v, _ref, _ref1, _ref2;
      base = this.engine();
      _ref = options['data'];
      for (k in _ref) {
        v = _ref[k];
        base.set(k, v);
      }
      delete options['data'];
      _ref1 = options['partial'];
      for (k in _ref1) {
        v = _ref1[k];
        base.partial(k, v);
      }
      delete options['partial'];
      _ref2 = options['filter'];
      for (k in _ref2) {
        v = _ref2[k];
        base.filter(k, v);
      }
      delete options['filter'];
      base.config(options);
      return W.resolve({
        result: base(str, true)
      });
    };

    return Marc;

  })(Adapter);

  module.exports = Marc;

}).call(this);
